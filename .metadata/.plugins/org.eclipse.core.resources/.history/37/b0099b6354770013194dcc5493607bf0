/*
 * Segement(1_0).cpp
 *
 *  Created on: 03-Jan-2014
 *      Author: mac
 */
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <bits/stdc++.h>
using namespace cv;
using namespace std;
//This function returns the square of the euclidean distance between 2 points.
Mat src; Mat src_gray;
int thresh = 100;
int max_thresh = 255;
RNG rng(12345);
/// Function header
void thresh_callback(int, void* );




bool R1(int R, int G, int B) {
    bool e1 = (R>95) && (G>40) && (B>20) && ((max(R,max(G,B)) - min(R, min(G,B)))>15) && (abs(R-G)>15) && (R>G) && (R>B);
    bool e2 = (R>220) && (G>210) && (B>170) && (abs(R-G)<=15) && (R>B) && (G>B);
    return (e1||e2);
}

bool R2(float Y, float Cr, float Cb) {
    bool e3 = Cr <= 1.5862*Cb+20;
    bool e4 = Cr >= 0.3448*Cb+76.2069;
    bool e5 = Cr >= -4.5652*Cb+234.5652;
    bool e6 = Cr <= -1.15*Cb+301.75;
    bool e7 = Cr <= -2.2857*Cb+432.85;
    return e3 && e4 && e5 && e6 && e7;
}

bool R3(float H, float S, float V) {
    return (H<25) || (H > 230);
}

Mat GetSkin(Mat const &src) {
    // allocate the result matrix
    Mat dst = src.clone();

    Vec3b cwhite = Vec3b::all(255);
    Vec3b cblack = Vec3b::all(0);

    Mat src_ycrcb, src_hsv;
    // OpenCV scales the YCrCb components, so that they
    // cover the whole value range of [0,255], so there's
    // no need to scale the values:
    cvtColor(src, src_ycrcb, CV_BGR2YCrCb);
    // OpenCV scales the Hue Channel to [0,180] for
    // 8bit images, so make sure we are operating on
    // the full spectrum from [0,360] by using floating
    // point precision:
    src.convertTo(src_hsv, CV_32FC3);
    cvtColor(src_hsv, src_hsv, CV_BGR2HSV);
    // Now scale the values between [0,255]:
    normalize(src_hsv, src_hsv, 0.0, 255.0, NORM_MINMAX, CV_32FC3);

   // cout<<src.rows<<endl;
    for(int i = 0; i < src.rows; i++) {
        for(int j = 0; j < src.cols; j++) {

            Vec3b pix_bgr = src.ptr<Vec3b>(i)[j];
            int B = pix_bgr.val[0];
            int G = pix_bgr.val[1];
            int R = pix_bgr.val[2];
            // apply rgb rule
            bool a = R1(R,G,B);

            Vec3b pix_ycrcb = src_ycrcb.ptr<Vec3b>(i)[j];
            int Y = pix_ycrcb.val[0];
            int Cr = pix_ycrcb.val[1];
            int Cb = pix_ycrcb.val[2];
            // apply ycrcb rule
            bool b = R2(Y,Cr,Cb);

            Vec3f pix_hsv = src_hsv.ptr<Vec3f>(i)[j];
            float H = pix_hsv.val[0];
            float S = pix_hsv.val[1];
            float V = pix_hsv.val[2];
            // apply hsv rule
            bool c = R3(H,S,V);

            if(!((a and b and c)))
                dst.ptr<Vec3b>(i)[j] = cblack;
        }
    }
    return dst;
}


int main(int argc, const char *argv[]) {
    // Get filename to the source image:
    /*if (argc != 2) {
        cout << "usage: " << argv[0] << " <image.ext>" << endl;
        exit(1);
    }*/
     //Load image & get skin proportions:
	//VideoCapture cap("/home/mac/Documents/PROJECT/Sign.mp4");
	VideoCapture cap("/home/mac/Documents/PROJECT/Last.AVI");

	//Mat3b image;
	//VideoCapture cap(0);
	Mat3b frame;
	while(cap.read(frame))
	{

		Mat skin = GetSkin(frame);

    // Show the results:
		//namedWindow("original");
		//namedWindow("skin");

		//imshow("original", image);
		//erode(skin,skin,Mat());
		//dilate(skin,skin,Mat());
		 cvtColor(skin,skin,CV_RGB2GRAY);
		Mat skin1 = skin > 50;
		 //blur( src_gray, src_gray, Size(3,3) );
		  //  imwrite("image_bw.jpg", img_bw);
		 blur( skin1, skin1, Size(3,3) );
		 char* source_window = "Source";
		 namedWindow( source_window, CV_WINDOW_AUTOSIZE );
		 // imshow( source_window, src );
		src_gray=skin1;
		 imshow(source_window, skin1);
		 createTrackbar( " Threshold:", "Source", &thresh, max_thresh, thresh_callback );
		 thresh_callback( 0, 0 );
		waitKey(5);
	}
    return 0;
}
bool cmp(Rect A, Rect B)
{
	return (A.height*A.width<B.height*B.width);

}
void thresh_callback(int, void* )
{
  Mat threshold_output;
  vector<vector<Point> > contours;
  vector<Vec4i> hierarchy;

  /// Detect edges using Threshold
  threshold( src_gray, threshold_output, thresh, 255, THRESH_BINARY );
  /// Find contours
  findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

  /// Approximate contours to polygons + get bounding rects and circles
  vector<vector<Point> > contours_poly( contours.size() );
  vector<Rect> boundRect( contours.size() );
  vector<Point2f>center( contours.size() );
  vector<float>radius( contours.size() );
  vector<Rect> Bound(contours.size());

  for( int i = 0; i < contours.size(); i++ )
     {
	  	  approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true );
	  	  boundRect[i] = boundingRect( Mat(contours_poly[i]) );
	  	  minEnclosingCircle( (Mat)contours_poly[i], center[i], radius[i] );

     }
  sort(Bound.begin(),Bound.end(),cmp);

  int size=(int) Bound.size();
  /// Draw polygonal contour + bonding rects + circles
  Mat drawing = Mat::zeros( threshold_output.size(), CV_8UC3 );
  //cout<<size<<endl;
cout<<boundRect[0].x<<" "<<boundRect[0].y<<endl;
  for(int j=size-1;j>=max(0,size-3);j--)
  {
	  cout<<"Size -->"<<j<<"  -->";
	  cout<<Bound[j].x<<" "<<Bound[j].y<<" "<<Bound[j].width<<" "<<Bound[j].height<<endl;
	  for( int i = 0; i< contours.size(); i++ )
	  {
		 if((Bound[j].x==boundRect[i].x) and (Bound[j].y==boundRect[i].y) and (Bound[j].height==boundRect[i].height) and (Bound[j].width==boundRect[i].width) )
		 {
			 Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
			 drawContours( drawing, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
			 rectangle( drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0 );
			 circle( drawing, center[i], (int)radius[i], color, 2, 8, 0 );
		 }
	  }
  }

  /// Show in a window
  namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
  imshow( "Contours", drawing );
}
