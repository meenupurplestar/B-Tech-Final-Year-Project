/*
 * Segement(1_0).cpp
 *
 *  Created on: 03-Jan-2014
 *      Author: mac
 */
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/nonfree/features2d.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/legacy/legacy.hpp>
#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
#include "skincolor.h"
#include "predict.h"
#include "findcontour.h"
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include "GRT.h"
using namespace cv;
using namespace std;
using namespace GRT;
//This function returns the square of the euclidean distance between 2 points.
Mat src, src_gray,skin1,drawing,skin,skin2;
Point L,R,H;
int dim = 2, nParticles = 100;
RNG rng(12345);
vector<Point> mouseV, particleV;
CvConDensation* condensH = cvCreateConDensation(dim, dim, nParticles);
CvConDensation* condensL = cvCreateConDensation(dim, dim, nParticles);
CvConDensation* condensR = cvCreateConDensation(dim, dim, nParticles);
long long int noframes;





void MyCircle( Mat &img, Point center,int color )
{
 int thickness = -1;
 int lineType = 8;
 circle(img,center,5.50,Scalar(0,255*color,255),-1,8,0);

}
int main(int argc, const char *argv[])
{


	VideoCapture cap("/home/mac/Documents/PROJECT/NewDataSets/Praveen/grandmother_p.wmv");
	noframes=1;
	Mat3b frame;

	int options;
	cout<<"Enter the options "<<endl;
	cout<<"1 Training Mode "<<endl;
	cout<<"2 Recognize Gesture "<<endl;
	cin>>options;
	double dWidth = cap.get(CV_CAP_PROP_FRAME_WIDTH); //get the width of frames of the video
	double dHeight = cap.get(CV_CAP_PROP_FRAME_HEIGHT); //get the height of frames of the video
	Size frameSize(static_cast<int>(dWidth), static_cast<int>(dHeight));
	//VideoWriter oVideoWriter ("/home/mac/Documents/PROJECT/Output/3spaces/BadlightSre1.avi", CV_FOURCC('P','I','M','1'), 20, frameSize, true); //initialize the VideoWriter object
	intialize_particlefilter(condensH);
	intialize_particlefilter(condensL);
	intialize_particlefilter(condensR);
	Mat trace = Mat::zeros( Size(dWidth,dHeight), CV_8UC3 );
	learn L;
	if(options==1)
	{
		L.record=true;
		cout<<"Enter the Gesture [0 to 99] that needs to trained";
		cin>>L.trainingClassLabel;
	}
	else
		L.record=false;


	while(cap.read(frame ) and options==1 or options==2)
	{
		noframes+=1;

		if(noframes<5) continue;
		skin = GetSkin(frame);
		cvtColor(skin,skin,CV_RGB2GRAY);
		skin1 = skin> 50;
		blur( skin1, skin1, Size(3,3) );
		char* source_window = "Source";
		src_gray=skin1;
		Mat output;
		Point array[3];int sz=0;
		skin1=draw_contour(src_gray,array,sz);
		if(sz>1)
		{
			MyCircle(trace,array[1],0);
			imshow("draw",trace);
		}
		char ch;
		if(L.record)
		{
			cin>>ch;
			if(ch=='y')
				L.update(array[1].x,array[1].y);
			else if(ch=='e')
				{
					L.trainingData.addSample(L.trainingClassLabel,L.timeseries);
					L.timeseries.clear();
				}

		}
		cout<<"You want to save it "<<endl;
		cin>>ch;
		if(ch==1)
		{
			//After recording your training data you can then save it to a file
			    if( !L.trainingData.saveDatasetToFile( "TrainingData.txt" ) ){
			        cout << "Failed to save dataset to file!\n";
			        return EXIT_FAILURE;
			    }
		}
		//Mat aux=thresh_callback(0,0);
		//drawKeypoints(skin1, keypoints, output);
		skin2=frame;
		blur( skin1, skin1, Size( 5, 5 ) );
		imshow(source_window, skin1);
		waitKey(50);

	}
    return 0;
}

