/*
 * SIFT.cpp
 *
 *  Created on: 06-Feb-2014
 *      Author: mac
 */
#include <stdio.h>
#include <iostream>
#include "opencv2/core/core.hpp"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/nonfree/features2d.hpp"

using namespace cv;

void readme();

/**
 * @function main
 * @brief Main function
 */
bool R2(float Y, float Cr, float Cb)
{

	//return (Cb>=77 and Cb<=127 and Cr>=133 and Cr<=173);
	return (Cb>=77 and Cb<=127 and Cr>=133 and Cr<=164);
	/*
    bool e3 = Cr <= 1.5862*Cb+20;
    bool e4 = Cr >= 0.3448*Cb+76.2069;
    bool e5 = Cr >= -4.5652*Cb+234.5652;
    bool e6 = Cr <= -1.15*Cb+301.75;
    bool e7 = Cr <= -2.2857*Cb+432.85;
    return e3 && e4 && e5 && e6 && e7;*/
}
Mat GetSkin(Mat const &src) {
    // allocate the result matrix
    Mat dst = src.clone();// OpenCV scales the YCrCb components, so that they
    Vec3b cwhite = Vec3b::all(255);// cover the whole value range of [0,255], so there's
    Vec3b cblack = Vec3b::all(0);// no need to scale the values:
    Mat src_ycrcb, src_hsv;// OpenCV scales the Hue Channel to [0,180] for
    cvtColor(src, src_ycrcb, CV_BGR2YCrCb);// 8bit images, so make sure we are operating on
    src.convertTo(src_hsv, CV_32FC3);// the full spectrum from [0,360] by using floating
    cvtColor(src_hsv, src_hsv, CV_BGR2HSV);// point precision:
    normalize(src_hsv, src_hsv, 0.0, 255.0, NORM_MINMAX, CV_32FC3);// Now scale the values between [0,255]:
    for(int i = 0; i < src.rows; i++) {// cout<<src.rows<<endl;
        for(int j = 0; j < src.cols; j++)
        {

        	Vec3b pix_bgr = src.ptr<Vec3b>(i)[j];
        	int B = pix_bgr.val[0];int G = pix_bgr.val[1];int R = pix_bgr.val[2];
        	            // apply rgb rule
        	bool a = R1(R,G,B);

        	Vec3b pix_ycrcb = src_ycrcb.ptr<Vec3b>(i)[j];
        	int Y = pix_ycrcb.val[0];int Cr = pix_ycrcb.val[1];int Cb = pix_ycrcb.val[2];
        	            // apply ycrcb rule
        	bool b = R2(Y,Cr,Cb);
        	Vec3f pix_hsv = src_hsv.ptr<Vec3f>(i)[j];
        	float H = pix_hsv.val[0];float S = pix_hsv.val[1];float V = pix_hsv.val[2];
        	                        // apply hsv rule
        	bool c = R3(H,S,V);


            if(!(b))
                dst.ptr<Vec3b>(i)[j] = cblack;
        }
    }
    return dst;
}
int main( int argc, char** argv )
{
  //if( argc != 3 )
  //{ readme(); return -1; }
Mat img_1,img_2;


  img_1 = imread( "/home/mac/Documents/PROJECT/SIFT/a.JPG", CV_LOAD_IMAGE_GRAYSCALE );
  img_2 = imread( "/home/mac/Documents/PROJECT/SIFT/b.JPG", CV_LOAD_IMAGE_GRAYSCALE );

  //imshow("sdf",img_1);
  if( !img_1.data || !img_2.data )
  { std::cout<< " --(!) Error reading images " << std::endl; return -1; }

  //-- Step 1: Detect the keypoints using SURF Detector
  int minHessian = 400;

  //SiftFeatureDetector detector;

  SurfFeatureDetector detector( minHessian );

  std::vector<KeyPoint> keypoints_1, keypoints_2;

  detector.detect( img_1, keypoints_1 );
  detector.detect( img_2, keypoints_2 );

  //-- Step 2: Calculate descriptors (feature vectors)
  SurfDescriptorExtractor extractor;

  Mat descriptors_1, descriptors_2;

  extractor.compute( img_1, keypoints_1, descriptors_1 );
  extractor.compute( img_2, keypoints_2, descriptors_2 );

  //-- Step 3: Matching descriptor vectors using FLANN matcher
  FlannBasedMatcher matcher;
  std::vector< DMatch > matches;
  matcher.match( descriptors_1, descriptors_2, matches );

  double max_dist = 0; double min_dist = 100;

  //-- Quick calculation of max and min distances between keypoints
  for( int i = 0; i < descriptors_1.rows; i++ )
  { double dist = matches[i].distance;
    if( dist < min_dist ) min_dist = dist;
    if( dist > max_dist ) max_dist = dist;
  }

  printf("-- Max dist : %f \n", max_dist );
  printf("-- Min dist : %f \n", min_dist );

  //-- Draw only "good" matches (i.e. whose distance is less than 2*min_dist,
  //-- or a small arbitary value ( 0.02 ) in the event that min_dist is very
  //-- small)
  //-- PS.- radiusMatch can also be used here.
  std::vector< DMatch > good_matches;

  for( int i = 0; i < descriptors_1.rows; i++ )
  { if( matches[i].distance <= max(2*min_dist, 0.02) )
    { good_matches.push_back( matches[i]); }
  }

  //-- Draw only "good" matches
  Mat img_matches;
  drawMatches( img_1, keypoints_1, img_2, keypoints_2,
               good_matches, img_matches, Scalar::all(-1), Scalar::all(-1),
               vector<char>(), DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS );

  //-- Show detected matches
  imshow( "Good Matches", img_matches );

  for( int i = 0; i < (int)good_matches.size(); i++ )
  { printf( "-- Good Match [%d] Keypoint 1: %d  -- Keypoint 2: %d  \n", i, good_matches[i].queryIdx, good_matches[i].trainIdx ); }

  waitKey(0);

  return 0;
}

/**
 * @function readme
 */
void readme()
{ std::cout << " Usage: ./SURF_FlannMatcher <img1> <img2>" << std::endl; }



